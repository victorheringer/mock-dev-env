version: "3.9"

services:
  postgres:
    image: docker.io/library/postgres:15
    container_name: dev_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    image: docker.io/dpage/pgadmin4
    container_name: dev_pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"

  mongo:
    image: docker.io/library/mongo:6
    container_name: dev_mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongo_data:/data/db

  mongo-express:
    image: docker.io/library/mongo-express
    container_name: dev_mongo_express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASS}
      ME_CONFIG_MONGODB_SERVER: mongo
    ports:
      - "${MONGO_EXPRESS_PORT}:8081"

  redis:
    image: docker.io/library/redis:7
    container_name: dev_redis
    restart: always
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data

  redis-commander:
    image: docker.io/rediscommander/redis-commander:latest
    container_name: dev_redis_commander
    restart: always
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASS}
    ports:
      - "${REDIS_COMMANDER_PORT}:8081"

  minio:
    image: docker.io/minio/minio
    container_name: dev_minio
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio_data:/data

  mc:
    image: docker.io/minio/mc
    container_name: dev_minio_client
    entrypoint: /bin/sh
    stdin_open: true
    tty: true
    environment:
      MC_HOST_localminio: http://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@minio:${MINIO_PORT}

  mailcatcher:
    image: docker.io/schickling/mailcatcher
    container_name: dev_mailcatcher
    restart: always
    ports:
      - "${MAILCATCHER_SMTP_PORT}:1025"
      - "${MAILCATCHER_WEB_PORT}:1080"

  rabbitmq:
    image: docker.io/library/rabbitmq:management
    container_name: dev_rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"

  loki:
    image: docker.io/grafana/loki:latest
    container_name: dev_loki
    restart: always
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "${LOKI_PORT}:3100"
    volumes:
      - loki_data:/loki

  grafana:
    image: docker.io/grafana/grafana:latest
    container_name: dev_grafana
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_HTTP_PORT: ${GRAFANA_PORT}
      GF_DASHBOARDS_JSON_ENABLED: "true"
    ports:
      - "${GRAFANA_PORT}:3000"
    depends_on:
      - loki
    volumes:
      - grafana_data:/var/lib/grafana

  ultrahook:
    container_name: dev_ultrahook
    image: docker.io/stacksimple/ultrahook:latest
    environment:
      ULTRAHOOK_API_KEY: "${ULTRAHOOK_API_KEY}"
      ULTRAHOOK_LOCAL_URL: "${ULTRAHOOK_LOCAL_URL}"
    restart: always
    ports:
      - "${ULTRAHOOK_PORT}:5000"
    entrypoint: >
      sh -c 'exec ultrahook ${ULTRAHOOK_NAMESPACE} ${ULTRAHOOK_LOCAL_URL}'

  sqlite-web:
    image: docker.io/coleifer/sqlite-web
    container_name: dev_sqlite_web
    restart: always
    environment:
      SQLITE_DATABASE: "/data/${SQLITE_DB_NAME}"
    ports:
      - "${SQLITE_WEB_PORT}:8080"
    volumes:
      - ${SQLITE_DATA_PATH}:/data
    command: sqlite_web /data/${SQLITE_DB_NAME} --host 0.0.0.0 --port 8080 --no-browser

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  minio_data:
  loki_data:
  grafana_data:
